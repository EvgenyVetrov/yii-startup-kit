<?php

namespace modules\blog\models;

use Yii;
use common\components\Formatter;
use yii\behaviors\TimestampBehavior;
use yii\web\NotFoundHttpException;

/**
 * This is the model class for table "blog_posts".
 * Модель статьи (поста)
 *
 * @property int $id
 * @property string $title
 * @property string $bg_image
 * @property string $general_image
 * @property string $alt_image
 * @property string $announce
 * @property string $text
 * @property int $creation_date
 * @property int $publication_date
 * @property int $category_id
 * @property string $seo_keywords
 * @property string $seo_description
 * @property string $canonical_url
 * @property int $author_id
 * @property int $status
 * @property string $own_description
 * @property int $created_at
 * @property int $updated_at
 */
class BaseBlogPosts extends \yii\db\ActiveRecord
{
    const STATUS_DRAFT  = 0;
    const STATUS_ACTIVE = 1;
    const STATUS_LINK   = 2;


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'blog_posts';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['text'], 'string'],
            [['author_id', 'created_at', 'updated_at'], 'integer'],
            [['creation_date', 'publication_date'], 'date', 'format' => 'php:d.m.Y', 'message' => 'Неккоректный формат'],
            [['title'], 'string', 'max' => 120],
            [['bg_image', 'general_image'], 'string', 'max' => 50],
            [['alt_image', 'seo_keywords', 'seo_description', 'canonical_url'], 'string', 'max' => 250],
            [['announce'], 'string', 'max' => 1000],
            [['category_id', 'status'], 'string', 'max' => 3],
            [['own_description'], 'string', 'max' => 1024],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id'    => 'ID',
            'title' => 'Заголовок',
            'bg_image'          => 'Фоновое изображение',
            'general_image'     => 'Главная картинка',
            'alt_image'         => 'Alt для главной картинки',
            'announce'          => 'Аннонс',
            'text'              => 'Содержимое статьи',
            'creation_date'     => 'Дата создания',
            'publication_date'  => 'Дата публикации',
            'category_id'       => 'Категория',
            'seo_keywords'      => 'Seo Keywords',
            'seo_description'   => 'Seo Description',
            'canonical_url'     => 'Canonical Url',
            'author_id'         => 'Автор',

            'status'          => 'Статус',
            'own_description' => 'Внутренее примечание',
            'created_at'      => 'создано',
            'updated_at'      => 'обновлено',
        ];
    }


    public function behaviors()
    {
        return [
            TimestampBehavior::class,
        ];
    }


    public function beforeSave($insert)
    {
        // приводим даты к таймштампу
        if ($this->creation_date) {
            $this->creation_date = Formatter::asDateToTimestamp($this->creation_date, 'd.m.Y');
        }
        if ($this->publication_date) {
            $this->publication_date = Formatter::asDateToTimestamp($this->publication_date, 'd.m.Y');
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    public function getPostBgImageUrl()
    {
        if (!$this->bg_image) {
            return '/img/blog/list-headers/bg9.jpg';
        }

        return '/img/blog/posts/'. $this->id .'/'. $this->bg_image;
    }


    /**
     * Связь с категориями
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(BaseBlogCategories::class, ['id' => 'category_id']);
    }



    /**
     * @return array
     */
    public static function statusLabels()
    {
        return [
            0 => 'Черновик',
            1 => 'Активно',
            2 => 'Только по ссылке'
        ];
    }



    /**
     * Поиск модели и обработка эксцепшенов
     * чтоб каждый раз не писать в контроллерах этот метод
     *
     * @param $post_id
     * @return null|static
     * @throws NotFoundHttpException
     */
    public static function findModel($post_id)
    {
        $model = self::findOne($post_id);

        if ($model !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('Поста #'. $post_id .' не существует');
        }
    }
}
